#+TITLE: Emacs Configuration File
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el

* Vanilla Configuration

This section makes changes to the vanilla properties and modes in Emacs.

** Startup

This removes the Welcome startup screen.

#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
#+end_src

** UI

*** Modes

We remove most mouse-based elements from Emacs UI, leaving only the text-editor.

#+begin_src emacs-lisp
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src

This enables line number and column information in the editor. We also remove the line number from some of the modes where it is not visually appealing.

#+begin_src emacs-lisp
  (global-display-line-numbers-mode 1)
  (column-number-mode 1)

  ;; Disable line numbers on certain modes
  (dolist (mode '(shell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

A mode for highlighting the current cursor line in Emacs.

#+begin_src emacs-lisp
  (global-hl-line-mode 1)
#+end_src

*** Backups

We change Emacs backup files directory from the file folder to a system temp folder.

#+begin_src emacs-lisp
  (setq backup-directory-alist
	`((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
	`((".*" ,temporary-file-directory t)))
#+end_src

** Theme

*** Modus Vivendi

Using the dark theme Modus Vivendi.

#+begin_src emacs-lisp
  (load-theme 'modus-vivendi t)
#+end_src

*** Faces

Remove the border from the mode line

#+begin_src emacs-lisp
  (set-face-attribute 'mode-line nil :box nil)
  (set-face-attribute 'mode-line-inactive nil :box nil)
#+end_src

Changes the font size in the editor.

#+begin_src emacs-lisp
  (set-face-attribute 'default nil :height 170)
#+end_src

Adds transparency to the active and inactive frame.

#+begin_src emacs-lisp
  (set-frame-parameter (selected-frame) 'alpha '(92 85))
  (add-to-list 'default-frame-alist '(alpha 92 85))
#+end_src

*** Parentheses

Changes the style for Modus Vivendi parentheses matching.

#+begin_src emacs-lisp
  (setq modus-themes-paren-match '(bold intense))
#+end_src

*** Window

Starts Emacs window maximized.

#+begin_src emacs-lisp
  (add-hook 'window-setup-hook 'toggle-frame-maximized t)
#+end_src


*** Keybindings

Changes =Escape= to do the same as =C-g=.

#+begin_src emacs-lisp
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src

** General Configurations

*** Tabs

Disable =indent-tabs-mode= globally.

#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil)
#+end_src

** Packages

*** Package loader

We load the package loader package and initialize its contents.

#+begin_src emacs-lisp
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			   ("org" . "https://orgmode.org/elpa/")
			   ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)

  (unless package-archive-contents
    (package-refresh-contents))
#+end_src

*** use-package

Here we install use-package, if not already installed.

#+begin_src emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
#+end_src

Enabling use-package.

#+begin_src emacs-lisp
  (require 'use-package)

  (setq use-package-always-ensure t)
#+end_src

*** Org Mode

Updates and configures Org mode.

#+begin_src emacs-lisp
  (use-package org
    :config
    (setq org-ellipsis " â–¼"
	  org-agenda-start-with-log-mode t
	  org-log-done 'time
	  org-log-into-drawer t)

    (require 'org-tempo)
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp")))
#+end_src

Enables =org-indent-mode= when entering =org-mode=.

#+begin_src emacs-lisp
  (defun my/org-mode-hook ()
      (org-indent-mode 1))

  (add-hook 'org-mode-hook 'my/org-mode-hook)
#+end_src

Automatically exports this file into init.el when saved.

#+begin_src emacs-lisp
  (defun my/init-file-org-save-hook ()
    (when (string-equal buffer-file-truename "~/.emacs.d/init.org")
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'my/init-file-org-save-hook)))
#+end_src

*** Apperance packages

**** :diminish

This adds =:diminish= command to =use-package=, allowing us to hide minor modes.

#+begin_src emacs-lisp
  (use-package diminish)
#+end_src

**** doom-modeline

Installs and configure =doom-modeline=

#+begin_src emacs-lisp
  (use-package doom-modeline
    :diminish
    :config
    (doom-modeline-mode)
    (unless (package-installed-p 'doom-modeline)
      (all-the-icons-install-fonts t)))
#+end_src

**** rainbow-delimiters

=rainbow-delimiters= adds colors to matching parenthesis in programming modes.

#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :diminish
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

*** Documentation

**** helpful

Replaces the default describe functions keybindings with a more complete documentation. We also use the integrate with =counsel= for command auto-completion and descriptions.

#+begin_src emacs-lisp
  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind (([remap describe-function] . counsel-describe-funtion)
           ([remap describe-variable] . counsel-describe-variable)
           ([remap describe-key] . #'helpful-key)))
#+end_src

*** Auto-completion

**** ivy

We use =ivy= for a light-weight auto-completion for commands.

#+begin_src emacs-lisp
  (use-package ivy
    :diminish
    :config
    (ivy-mode))
#+end_src

**** counsel

Counsel adds extra functionality to =ivy-mode= and its auto-completion features.

#+begin_src emacs-lisp
  (use-package counsel
    :diminish
    :config
    (counsel-mode))
#+end_src

**** ivy-rich

Shows richer information when using =ivy-mode= and =cousel-mode=.

#+begin_src emacs-lisp
  (use-package ivy-rich
    :diminish
    :after counsel
    :config
    (ivy-rich-mode 1))
#+end_src

**** which-key

This package shows what commands can follow after you start a chord and waits.

#+begin_src emacs-lisp
  (use-package which-key
    :diminish
    :config
    (which-key-mode))
#+end_src

*** Project Management

**** projectile

Improves project management capabilities of Emacs, adding features such as: searching all files in a project.
We bind =C-c p= to access =projectile='s keymap.

#+begin_src emacs-lisp
  (use-package projectile
    :diminish
    :bind (:map projectile-mode-map
                ("C-c p" . projectile-command-map))
    :config
    (projectile-mode))
#+end_src

**** counsel-projectile

We want =counsel= and =ivy= features when running =projectitle= commands.

#+begin_src emacs-lisp
  (use-package counsel-projectile
    :diminish
    :after projectile
    :config
    (counsel-projectile-mode))
#+end_src

**** magit

=magit= integrates Git commands inside the Emacs editor.

#+begin_src emacs-lisp
  (use-package magit)
#+end_src

*** Programming Languages

**** lsp-mode

Language Server Protocol mode for IDE-like features when programming.

#+begin_src emacs-lisp
  (use-package lsp-mode
    :init
    (setq lsp-keymap-prefix "C-c l")
    :hook ((lsp-mode . lsp-enable-which-key-integration))
    :commands (lsp lsp-deferred))

#+end_src

**** lsp-ui-mode

Shows information from =lsp-mode= in the UI.

#+begin_src emacs-lisp
  (use-package lsp-ui
    :commands lsp-ui-mode)
#+end_src

**** lsp-ivy

=ivy-mode= integration with =lsp-mode=

#+begin_src emacs-lisp
  (use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
#+end_src

**** lsp-python-ms

Microsoft's Python language server integration.

#+begin_src emacs-lisp
  (use-package lsp-python-ms
    :ensure t
    :init (setq lsp-python-ms-auto-install-server t)
    :hook (python-mode . (lambda ()
                           (require 'lsp-python-ms)
                           (lsp-deferred))))
#+end_src

**** company-mode

Adds auto-completion dialogue box.

#+begin_src emacs-lisp
  (use-package company
    :hook (prog-mode . company-mode)
    :config
    (setq company-minimum-prefix-length 1
          company-idle-delay 0.0))
#+end_src

**** flycheck

Adds syntax highlighting capabilities to Emacs.

#+begin_src emacs-lisp
  (use-package flycheck
    :hook (prog-mode . flycheck-mode))
#+end_src

**** solidity-mode

The official =solidity-mode= for Emacs. Adds syntax highlight to ~.sol~ files.

#+begin_src emacs-lisp
  (use-package solidity-mode)
#+end_src

