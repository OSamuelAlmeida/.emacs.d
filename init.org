#+TITLE: Emacs Configuration File
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el

* Vanilla Configuration

This section makes changes to the vanilla properties and modes in Emacs.

** Startup

This removes the Welcome startup screen.

#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
#+end_src

Change garbage collector threshold and timing.

#+begin_src emacs-lisp
  (setq gc-cons-threshold (* 50 1000 1000))
  (add-hook 'after-init-hook (lambda () (setq gc-cons-threshold 800000)))
#+end_src
** Backups

Set Emacs backup files directory to a system temporary folder.

#+begin_src emacs-lisp
  (setq backup-directory-alist
        `((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
        `((".*" ,temporary-file-directory t)))
#+end_src

** Appearence
*** Modes

Clean up the UI leaving only the text-editor and the top menu bar.

#+begin_src emacs-lisp
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src

Enables global line numbers in the editor and shows current column and modeline.

#+begin_src emacs-lisp
  (global-display-line-numbers-mode 1)
  (column-number-mode 1)
#+end_src

Disables global line numbers in some modes where it doesn't make sense.

#+begin_src emacs-lisp
  (dolist (mode '(shell-mode-hook
                  vterm-mode-hook
                  treemacs-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

A mode for highlighting the current cursor line in Emacs.

#+begin_src emacs-lisp
  (global-hl-line-mode 1)
#+end_src

*** Modus Vivendi

Using the dark theme Modus Vivendi.

#+begin_src emacs-lisp
  (load-theme 'modus-vivendi t)
#+end_src

*** Faces

Remove borders from the modeline.

#+begin_src emacs-lisp
  (set-face-attribute 'mode-line nil :box nil)
  (set-face-attribute 'mode-line-inactive nil :box nil)
#+end_src

Changes the editor font size.

#+begin_src emacs-lisp
  (set-face-attribute 'default nil :height 170)
#+end_src

Makes the Emacs window transparent, with different alphas if the frame is in focus or not. 

#+begin_src emacs-lisp
  (setq my/window-active-alpha 92
        my/window-not-active-alpha 85)

  (set-frame-parameter (selected-frame) 'alpha `(,my/window-active-alpha ,my/window-not-active-alpha))
  (add-to-list 'default-frame-alist `(alpha ,my/window-active-alpha ,my/window-not-active-alpha))
#+end_src

*** Parentheses

Changes the style for Modus Vivendi parentheses matching.

#+begin_src emacs-lisp
  (setq modus-themes-paren-match '(bold intense))
#+end_src

*** Window

Starts Emacs window maximized.

#+begin_src emacs-lisp
  (add-hook 'window-setup-hook 'toggle-frame-maximized t)
#+end_src

*** Dialog boxes

Disables GUI dialog boxes.

#+begin_src emacs-lisp
  (setq use-dialog-box nil)
#+end_src

** Keybindings

Changes =<escape>= to act like =C-g=.

#+begin_src emacs-lisp
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src

** Editor
*** Indentation

Set default indetation to spaces by disabling =indent-tabs-mode= globally.

#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil)
#+end_src

** GPG

Uses loopback mode for gpg.

#+begin_src emacs-lisp
  (setq epa-pinentry-mode 'loopback)
#+end_src

* Load Files
** Sensitive configuration

Load variables that are not commited to repository.

#+begin_src emacs-lisp
  (load "~/.emacs.d/vars.el")
#+end_src
* Packages
** Package Management
*** package.el

Initialize package.el, set package-archives sources and refresh the contents.

#+begin_src emacs-lisp
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)

  (unless package-archive-contents
    (package-refresh-contents))
#+end_src

*** use-package

Install use-package, if not already installed.

#+begin_src emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
#+end_src

Enables use-package and ensures every package is present.

#+begin_src emacs-lisp
  (require 'use-package)

  (setq use-package-always-ensure t)
#+end_src

** Org


Updates and configures Org mode.

#+begin_src emacs-lisp
  (use-package org
    :config
    (setq org-ellipsis " â–¼"
          org-agenda-start-with-log-mode t
          org-log-done 'time
          org-log-into-drawer t)

    (require 'org-tempo)
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp")))
#+end_src

Enables =org-indent-mode= when entering =org-mode=.

#+begin_src emacs-lisp
  (defun my/org-mode-hook ()
    (org-indent-mode 1)
    (visual-line-mode))

  (add-hook 'org-mode-hook 'my/org-mode-hook)
#+end_src

Automatically exports this file into init.el when saved.

#+begin_src emacs-lisp
  (defun my/init-file-org-save-hook ()
    (when (string-equal buffer-file-truename "~/.emacs.d/init.org")
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'my/init-file-org-save-hook)))
#+end_src

** Appearance
*** diminish.el

Enables =:diminish= command to =use-package=, to hide minor modes.

#+begin_src emacs-lisp
  (use-package diminish)
#+end_src

*** doom-modeline

Enables and configure =doom-modeline= with =all-the-icons=.

#+begin_src emacs-lisp
  (use-package doom-modeline
    :diminish
    :config
    (doom-modeline-mode)
    (unless (package-installed-p 'doom-modeline)
      (all-the-icons-install-fonts t)))
#+end_src

*** rainbow-delimiters

=rainbow-delimiters= adds colors to matching parenthesis in programming modes.

#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :diminish
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** Documentation
*** helpful

Replaces the default describe functions keybindings with a more concise documentation. We also use integrate with =counsel= for command auto-completion and descriptions.

#+begin_src emacs-lisp
  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind (([remap describe-function] . counsel-describe-funtion)
           ([remap describe-variable] . counsel-describe-variable)
           ([remap describe-key] . #'helpful-key)))
#+end_src

** Auto-completion
*** ivy

We use =ivy= for a light-weight auto-completion for commands.

#+begin_src emacs-lisp
  (use-package ivy
    :diminish
    :config
    (ivy-mode))
#+end_src

*** counsel

Counsel adds extra functionality to =ivy-mode= and its auto-completion features.

#+begin_src emacs-lisp
  (use-package counsel
    :diminish
    :config
    (counsel-mode))
#+end_src

*** ivy-rich

Shows richer information when using =ivy-mode= and =cousel-mode=.

#+begin_src emacs-lisp
  (use-package ivy-rich
    :diminish
    :after counsel
    :config
    (ivy-rich-mode 1))
#+end_src

*** prescient

Better sorting for Emacs.

#+begin_src emacs-lisp
  (use-package prescient)
#+end_src

*** ivy-prescient

=prescient= integration with =ivy=.

#+begin_src emacs-lisp
  (use-package ivy-prescient
    :after (ivy prescient)
    :config
    (ivy-prescient-mode))
    #+end_src

*** which-key

This package shows what commands can follow after you start a chord and waits.

#+begin_src emacs-lisp
  (use-package which-key
    :diminish
    :config
    (which-key-mode))
#+end_src

** Project Management
*** projectile

Improves project management capabilities of Emacs. We bind =C-c p= to access =projectile='s keymap.

#+begin_src emacs-lisp
  (use-package projectile
    :diminish
    :init
    (projectile-mode +1)
    :bind (:map projectile-mode-map
                ("C-c p" . projectile-command-map)))

#+end_src

*** counsel-projectile

We want =counsel= and =ivy= features when running =projectitle= commands.

#+begin_src emacs-lisp
  (use-package counsel-projectile
    :diminish
    :after projectile
    :config
    (counsel-projectile-mode))
#+end_src

*** magit

=magit= integrates Git commands inside the Emacs editor.

#+begin_src emacs-lisp
  (use-package magit)
#+end_src

*** forge

Integrates =magit= with git forges.

#+begin_src emacs-lisp
  (use-package forge
    :after magit)
#+end_src

*** treemacs

Directory and tree-structures visualzation.

#+begin_src emacs-lisp
  (use-package treemacs)
#+end_src

*** treemacs-projectile

=treemacs= integration with =projectile=.

#+begin_src emacs-lisp
  (use-package treemacs-projectile
    :after (treemacs projectile))
#+end_src

** Programming Utilities
*** exec-path-from-shell

Makes sure our shell variables are the same inside Emacs.

#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :config
    (when (memq window-system '(mac ns x))
      (exec-path-from-shell-initialize)))
#+end_src

*** vterm

Native terminal emulation

#+begin_src emacs-lisp
  (use-package vterm
    :bind (("C-c t t" . vterm)
           ("C-c t o" . vterm-other-window)))
#+end_src

** Language Server Mode
*** lsp-mode

Language Server Protocol mode for IDE-like features in programming modes.

#+begin_src emacs-lisp
  (use-package lsp-mode
    :init
    (setq lsp-keymap-prefix "C-c l")
    :hook ((lsp-mode . lsp-enable-which-key-integration)
           (js-mode . lsp-deferred)
           (c++-mode . lsp-deferred)
           (c-mode . lsp-deferred))
    :commands (lsp lsp-deferred)
    :custom
    (lsp-completion-provider :none))

#+end_src

*** lsp-ui-mode

Shows information from =lsp-mode= in the UI.

#+begin_src emacs-lisp
  (use-package lsp-ui
    :commands lsp-ui-mode)
#+end_src

*** lsp-ivy

=ivy-mode= integration with =lsp-mode=.

#+begin_src emacs-lisp
  (use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
#+end_src

*** lsp-treemacs

=treemacs= and =lsp-mode= integration to visualize projects.

#+begin_src emacs-lisp
  (use-package lsp-treemacs
    :after (lsp treemacs))
#+end_src

** Programming Auto-complete
*** company

Adds auto-completion dialogue box.

#+begin_src emacs-lisp
  (use-package company
    :hook (prog-mode . company-mode)
    :bind (:map company-active-map
                ("<tab>" . company-complete-selection))
    (:map lsp-mode-map
          ("<tab>". company-indent-or-complete-common))
    :config
    (setq company-minimum-prefix-length 1
          company-idle-delay 0.0))
#+end_src

Enable yasnippet backend for =company-mode=.

#+begin_src emacs-lisp
  (defun my/company-mode-hook ()
    (setq-local company-backends '((company-capf :with company-yasnippet))))

  (add-hook 'company-mode-hook 'my/company-mode-hook)
#+end_src

*** company-box

Improves =company-mode= dialog box.

#+begin_src emacs-lisp
  (use-package company-box
    :hook (company-mode . company-box-mode))
#+end_src

*** company-prescient

Better sorting for =company-mode=.

#+begin_src emacs-lisp
  (use-package company-prescient
    :after (company prescient)
    :hook (company-mode . company-prescient-mode))
#+end_src

*** yasnippet

Adds snippets capabilities to Emacs.

#+begin_src emacs-lisp
  (use-package yasnippet
    :hook (prog-mode . yas-minor-mode))
#+end_src

*** yasnippet-snippets

Collection of snippets for =yasnippet=.

#+begin_src emacs-lisp
  (use-package yasnippet-snippets
    :after (yasnippet))
#+end_src

** Syntax Checking
*** flycheck

Adds syntax checking capabilities to Emacs.

#+begin_src emacs-lisp
  (use-package flycheck
    :hook (prog-mode . flycheck-mode))
#+end_src

** Programming Languages
*** Python
**** lsp-python-ms

Microsoft's Python language server integration.

#+begin_src emacs-lisp
  (use-package lsp-python-ms
    :ensure t
    :init (setq lsp-python-ms-auto-install-server t)
    :hook (python-mode . (lambda ()
                           (require 'lsp-python-ms)
                           (lsp-deferred))))
#+end_src
**** pyvenv

Enables python virtual env in Emacs.

#+begin_src emacs-lisp
  (use-package pyvenv
    :diminish
    :hook (python-mode . pyvenv-mode))

#+end_src

**** blacken

#+begin_src emacs-lisp
  (defun my/blacken-mode-python-hook ()
    (unless (member t (mapcar
                       (lambda (item) (string-prefix-p item (expand-file-name (buffer-file-name))))
                       blacken-mode-disabled))
                    (blacken-mode)))
#+end_src

Applies Python black formatter.

#+begin_src emacs-lisp
  (use-package blacken
    :diminish
    :hook (python-mode . my/blacken-mode-python-hook))
#+end_src

*** Javascript
**** js-mode

=js-mode= hook.

#+begin_src emacs-lisp
  (defun my/js-mode-hook ()
    (setq js-indent-level 2)
    (define-key js-mode-map (kbd "M-.") nil)) ;; M-. is originally-mapped to find symbol in js-mode

  (add-hook 'js-mode-hook 'my/js-mode-hook)
#+end_src

**** rjsx-mode

React mode for React files.

#+begin_src emacs-lisp
  (use-package rjsx-mode
    :mode "\\.js\\'")
#+end_src

React mode hook to disable =js2=mode= semi-colon warnings.

#+begin_src emacs-lisp
  (defun my/rjsx-mode-hook ()
    (setq js2-strict-missing-semi-warning nil))

  (add-hook 'rjsx-mode-hook 'my/rjsx-mode-hook)
#+end_src

*** Solidity
**** solidity-mode

The official =solidity-mode= for Emacs. Adds syntax highlight to ~.sol~ files.

#+begin_src emacs-lisp
  (use-package solidity-mode)
#+end_src

**** company-solidity

=company-mode= auto-completion for solidity.

#+begin_src emacs-lisp
  (use-package company-solidity
    :commands solidity-mode)
#+end_src

*** Rust
**** rust-mode

Rust programming language support.

#+begin_src emacs-lisp
  (use-package rust-mode
    :hook (rust-mode . lsp-deferred)
    :config
    (setq rust-format-on-save t))
#+end_src

*** C++
**** hook

#+begin_src emacs-lisp
  (defun my/c++-mode-hook ()
    (setq c-basic-offset 4)
    (s-set-offset 'substatement-open 0))

  (add-hook 'c++-mode-hook 'my/c++-mode-hook)
#+end_src

*** YAML

#+begin_src emacs-lisp
  (use-package yaml-mode
    :mode "\\.\\(yml\\yaml\\)\\'")
#+end_src

** DevOps

*** Docker

#+begin_src emacs-lisp
(use-package docker
  :ensure t
  :bind ("C-c d" . docker))
#+end_src

*** Kubernetes

#+begin_src emacs-lisp
  (use-package kubernetes
    :ensure t
    :commands (kubernetes-overview))
#+end_src



